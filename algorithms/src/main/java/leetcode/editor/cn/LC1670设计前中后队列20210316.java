package leetcode.editor.cn;
 
//ËØ∑‰Ω†ËÆæËÆ°‰∏Ä‰∏™ÈòüÂàóÔºåÊîØÊåÅÂú®ÂâçÔºå‰∏≠ÔºåÂêé‰∏â‰∏™‰ΩçÁΩÆÁöÑ push Âíå pop Êìç‰Ωú„ÄÇ 
//
// ËØ∑‰Ω†ÂÆåÊàê FrontMiddleBack Á±ªÔºö 
//
// 
// FrontMiddleBack() ÂàùÂßãÂåñÈòüÂàó„ÄÇ 
// void pushFront(int val) Â∞Ü val Ê∑ªÂä†Âà∞ÈòüÂàóÁöÑ ÊúÄÂâçÈù¢ „ÄÇ 
// void pushMiddle(int val) Â∞Ü val Ê∑ªÂä†Âà∞ÈòüÂàóÁöÑ Ê≠£‰∏≠Èó¥ „ÄÇ 
// void pushBack(int val) Â∞Ü val Ê∑ªÂä†Âà∞ÈòüÈáåÁöÑ ÊúÄÂêéÈù¢ „ÄÇ 
// int popFront() Â∞Ü ÊúÄÂâçÈù¢ ÁöÑÂÖÉÁ¥†‰ªéÈòüÂàó‰∏≠Âà†Èô§Âπ∂ËøîÂõûÂÄºÔºåÂ¶ÇÊûúÂà†Èô§‰πãÂâçÈòüÂàó‰∏∫Á©∫ÔºåÈÇ£‰πàËøîÂõû -1 „ÄÇ 
// int popMiddle() Â∞Ü Ê≠£‰∏≠Èó¥ ÁöÑÂÖÉÁ¥†‰ªéÈòüÂàó‰∏≠Âà†Èô§Âπ∂ËøîÂõûÂÄºÔºåÂ¶ÇÊûúÂà†Èô§‰πãÂâçÈòüÂàó‰∏∫Á©∫ÔºåÈÇ£‰πàËøîÂõû -1 „ÄÇ 
// int popBack() Â∞Ü ÊúÄÂêéÈù¢ ÁöÑÂÖÉÁ¥†‰ªéÈòüÂàó‰∏≠Âà†Èô§Âπ∂ËøîÂõûÂÄºÔºåÂ¶ÇÊûúÂà†Èô§‰πãÂâçÈòüÂàó‰∏∫Á©∫ÔºåÈÇ£‰πàËøîÂõû -1 „ÄÇ 
// 
//
// ËØ∑Ê≥®ÊÑèÂΩìÊúâ ‰∏§‰∏™ ‰∏≠Èó¥‰ΩçÁΩÆÁöÑÊó∂ÂÄôÔºåÈÄâÊã©Èù†ÂâçÈù¢ÁöÑ‰ΩçÁΩÆËøõË°åÊìç‰Ωú„ÄÇÊØîÊñπËØ¥Ôºö 
//
// 
// Â∞Ü 6 Ê∑ªÂä†Âà∞ [1, 2, 3, 4, 5] ÁöÑ‰∏≠Èó¥‰ΩçÁΩÆÔºåÁªìÊûúÊï∞ÁªÑ‰∏∫ [1, 2, 6, 3, 4, 5] „ÄÇ 
// ‰ªé [1, 2, 3, 4, 5, 6] ÁöÑ‰∏≠Èó¥‰ΩçÁΩÆÂºπÂá∫ÂÖÉÁ¥†ÔºåËøîÂõû 3 ÔºåÊï∞ÁªÑÂèò‰∏∫ [1, 2, 4, 5, 6] „ÄÇ 
// 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//ËæìÂÖ•Ôºö
//["FrontMiddleBackQueue", "pushFront", "pushBack", "pushMiddle", "pushMiddle", 
//"popFront", "popMiddle", "popMiddle", "popBack", "popFront"]
//[[], [1], [2], [3], [4], [], [], [], [], []]
//ËæìÂá∫Ôºö
//[null, null, null, null, null, 1, 3, 4, 2, -1]
//
//Ëß£ÈáäÔºö
//FrontMiddleBackQueue q = new FrontMiddleBackQueue();
//q.pushFront(1);   // [1]
//q.pushBack(2);    // [1, 2]
//q.pushMiddle(3);  // [1, 3, 2]
//q.pushMiddle(4);  // [1, 4, 3, 2]
//q.popFront();     // ËøîÂõû 1 -> [4, 3, 2]
//q.popMiddle();    // ËøîÂõû 3 -> [4, 2]
//q.popMiddle();    // ËøîÂõû 4 -> [2]
//q.popBack();      // ËøîÂõû 2 -> []
//q.popFront();     // ËøîÂõû -1 -> [] ÔºàÈòüÂàó‰∏∫Á©∫Ôºâ
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= val <= 109 
// ÊúÄÂ§öË∞ÉÁî® 1000 Ê¨° pushFrontÔºå pushMiddleÔºå pushBackÔºå popFrontÔºå popMiddle Âíå popBack „ÄÇ 
//
// 
// Related Topics ËÆæËÆ° ÈìæË°® 
// üëç 5 üëé 0

public class LC1670ËÆæËÆ°Ââç‰∏≠ÂêéÈòüÂàó20210316{
    public static void main(String[] args) {
//          Solution solution = new LC1670ËÆæËÆ°Ââç‰∏≠ÂêéÈòüÂàó20210316().new Solution();

FrontMiddleBackQueue q = new LC1670ËÆæËÆ°Ââç‰∏≠ÂêéÈòüÂàó20210316().new FrontMiddleBackQueue();
q.pushFront(1);   // [1]
q.pushFront(2);   // [1]
q.pushFront(3);   // [1]
q.pushFront(4);   // [1]
        System.out.println(q.popBack());      // ËøîÂõû 2 -> []

        System.out.println(q.popBack());      // ËøîÂõû 2 -> []

        System.out.println(q.popBack());      // ËøîÂõû 2 -> []

        System.out.println(q.popBack());      // ËøîÂõû 2 -> []


        q.pushBack(2);    // [1, 2]
q.pushMiddle(3);  // [1, 3, 2]
q.pushMiddle(4);  // [1, 4, 3, 2]
        System.out.println(q.popFront());     // ËøîÂõû 1 -> [4, 3, 2]
        System.out.println(q.popMiddle());    // ËøîÂõû 3 -> [4, 2]
        System.out.println(q.popMiddle());    // ËøîÂõû 4 -> [2]
        System.out.println(q.popBack());      // ËøîÂõû 2 -> []
        System.out.println(q.popFront());     // ËøîÂõû -1 -> [] ÔºàÈòüÂàó‰∏∫Á©∫Ôºâ
    }


    class CircularDeque {
        ListNode head = null;
        ListNode tail = null;
        int count=0;

        /** Initialize your data structure here. Set the size of the deque to be k. */
        public CircularDeque() {
            head = new ListNode(0);
            tail = new ListNode(0);
            head.next = tail;
            tail.pre = head;

        }

        /** Adds an item at the front of Deque. Return true if the operation is successful. */
        public boolean insertFront(int value) {
            ListNode node = new ListNode(value);
            ListNode next = head.next;
            head.next = node;
            node.pre = head;
            node.next = next;
            next.pre = node;
            count++;
            return true;
        }

        /** Adds an item at the rear of Deque. Return true if the operation is successful. */
        public boolean insertLast(int value) {
            ListNode node = new ListNode(value);
            ListNode pre = tail.pre;
            pre.next = node;
            node.pre = pre;
            tail.pre = node;
            node.next = tail;
            count++;
            return true;
        }

        /** Deletes an item from the front of Deque. Return true if the operation is successful. */
        public boolean deleteFront() {
            if(isEmpty()){
                return false;
            }
            head.next = head.next.next;
            head.next.pre = head;
            count--;
            return true;
        }

        /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
        public boolean deleteLast() {
            if(isEmpty()){
                return false;
            }
            tail.pre = tail.pre.pre;
            tail.pre.next = tail;
            count--;
            return true;
        }

        /** Get the front item from the deque. */
        public int getFront() {
            if(isEmpty()){
                return -1;
            }
            return head.next.val;
        }

        /** Get the last item from the deque. */
        public int getRear() {
            if(isEmpty()){
                return -1;
            }
            return tail.pre.val;
        }

        /** Checks whether the circular deque is empty or not. */
        public boolean isEmpty() {
            return count == 0;
        }
    }
//leetcode submit region begin(Prohibit modification and deletion)
class FrontMiddleBackQueue {
    CircularDeque preDeque;
    CircularDeque nextDeque;

    public FrontMiddleBackQueue() {
        preDeque = new CircularDeque();
        nextDeque = new CircularDeque();
    }

    private void refresh(){
        if(nextDeque.count - preDeque.count > 1){
            int front = nextDeque.getFront();
            nextDeque.deleteFront();
            preDeque.insertLast(front);

        }else if(preDeque.count > nextDeque.count){
            int rear = preDeque.getRear();
            boolean b = preDeque.deleteLast();
            nextDeque.insertFront(rear);
        }
    }
    
    public void pushFront(int val) {
        boolean b = preDeque.insertFront(val);
        refresh();
    }
    
    public void pushMiddle(int val) {
        boolean b = preDeque.insertLast(val);
        refresh();
    }
    
    public void pushBack(int val) {
        boolean b = nextDeque.insertLast(val);
        refresh();
    }
    
    public int popFront() {
        if(nextDeque.isEmpty()){
            return -1;
        }
        int front = -1;
        if(preDeque.isEmpty()){
            front = nextDeque.getFront();
            nextDeque.deleteFront();
        }else {
            front = preDeque.getFront();
            boolean b = preDeque.deleteFront();
            refresh();
        }
        return front;
    }
    
    public int popMiddle() {
        if(nextDeque.isEmpty()){
            return -1;
        }
        int middle = -1;
        if(preDeque.count == nextDeque.count){
            middle = preDeque.getRear();
            preDeque.deleteLast();
        }else if(preDeque.count < nextDeque.count){
            middle = nextDeque.getFront();
            nextDeque.deleteFront();
        }
        refresh();
        return middle;
    }
    
    public int popBack() {
        if(nextDeque.isEmpty()){
            return -1;
        }
        int rear = nextDeque.getRear();
        nextDeque.deleteLast();
        refresh();
        return rear;
    }
}

/**
 * Your FrontMiddleBackQueue object will be instantiated and called as such:
 * FrontMiddleBackQueue obj = new FrontMiddleBackQueue();
 * obj.pushFront(val);
 * obj.pushMiddle(val);
 * obj.pushBack(val);
 * int param_4 = obj.popFront();
 * int param_5 = obj.popMiddle();
 * int param_6 = obj.popBack();
 */
//leetcode submit region end(Prohibit modification and deletion)

}