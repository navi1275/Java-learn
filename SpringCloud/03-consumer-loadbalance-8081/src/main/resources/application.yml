server:
  port: 8081



spring:
  application:
    name: navi-demo-consumer

eureka:
  instance:
    instance-id: navi-demo-consumer-8081
  client:
    service-url:
      defaultZone: http://localhost:8090/eureka,http://localhost:8091/eureka,http://localhost:8092/eureka


feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 10000

  compression:
    request:
      enabled: true
      min-request-size: 2048
      mime-types: ["text/xml", "application/json", "application/xml"]
    response:
      enabled: true


# 负载均衡策略，@Bean注入IRule比配置优先
navi-demo-provider:
  ribbon:
#    com.netflix.loadbalancer.RoundRobinRule 轮询策略
#    com.netflix.loadbalancer.RandomRule 随机策略
#    com.netflix.loadbalancer.BestAvailableRule 最可用策略，选择并发量最小的 provider，即连接的消费者数量最少的 provider
#    com.netflix.loadbalancer.AvailabilityFilteringRule 可用过滤算法。该算法规则是：过滤掉处于熔断状态的 provider 与已经超过连接极限的 provider，对剩余 provider 采用轮询策略。
#    com.netflix.loadbalancer.RetryRule 重试策略
#    com.netflix.loadbalancer.ZoneAvoidanceRule zone 回避策略。根据 provider 所在 zone 及 provider 的可用性，对 provider 进行选择
#    com.netflix.loadbalancer.WeightedResponseTimeRule “权重响应时间”策略。根据每个 provider 的平均响应时间计算其权重，响应时间越快 权重越大，被选中的机率就越高。在刚启动时采用轮询策略。后面就会根据权重进行选择了
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule

